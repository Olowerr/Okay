struct InputVertex
{
	float3 pos : POSITION;
	float2 uv : UV;
	float3 normal : NORMAL;
};

struct TransformedVertex
{
	float4 svPos : SV_POSITION;
	float2 uv : UV;
	float3 normal : NORMAL;

	float3 worldPos : W_POS;
};

cbuffer Camera : register(b0)
{
	float4x4 viewProjectMatrix;
};

cbuffer Transform : register(b1)
{
	float4x4 worldMatrix;
};

Texture2D baseColour : register(t0);
Texture2D specular : register(t1);
Texture2D ambient : register(t2);

cbuffer MatData : register(b3)
{
	float2 uvTiling;
	float2 uvOffset;
}

SamplerState simp : register(s0);

float4 main(TransformedVertex input) : SV_TARGET
{
	return float4(1.f, 0.f, 1.f, 1.f); 
	return baseColour.Sample(simp, input.uv * uvTiling + uvOffset);
}