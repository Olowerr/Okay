struct InputVertex
{
	float3 pos : POSITION;
	float2 uv : UV;
	float3 normal : NORMAL;
};

struct TransformedVertex
{
	float4 svPos : SV_POSITION;
	float2 uv : UV;
	float3 normal : NORMAL;

	float3 worldPos : W_POS;
};

cbuffer Camera : register(b0)
{
	float4x4 viewProjectMatrix;
};

cbuffer Transform : register(b1)
{
	float4x4 worldMatrix;
};

Texture2D baseColour : register(t0);
Texture2D specular : register(t1);
Texture2D ambient : register(t2);

cbuffer MatData : register(b3)
{
	float2 uvTiling;
	float2 uvOffset;
}

SamplerState simp : register(s0);

static float3 SUN_DIR = -normalize(float3(1.f, -1.f, 1.f));

float4 main(TransformedVertex input) : SV_TARGET
{
	float green = input.worldPos.y / 10.f;
	green = green * green * (3.f - 2.f * green);
	float3 colour = lerp(float3(0.f, 1.f, 0.f), float3(2.f, 2.f, 2.f), green) * 0.5f;

#if 1
	return float4(max(dot(input.normal, SUN_DIR), 0.1f) * colour, 1.f); 
#else
	return float4(colour, 1.f); 

#endif
}